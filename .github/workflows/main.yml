name: Build and Release Project

on:
  push:
    tags:
      - 'v*'  # Trigger on tag pushes like v1.0

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        #os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # **Install Dependencies on Ubuntu**
      - name: Install dependencies on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libboost-all-dev ninja-build

      # **Install Dependencies on macOS**
      - name: Install dependencies on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install cmake boost ninja

      # **Install Dependencies on Windows**
      - name: Install dependencies on Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System' ninja
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg.exe install boost
          
      # **Build the Project on Ubuntu and macOS**
      - name: Build the project on Ubuntu and macOS
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          cmake -S code -B build -G Ninja -DCMAKE_BUILD_TYPE=Release
          cmake --build build

      # **Build the Project on Windows**
      - name: Build the project on Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        env:
          VCPKG_ROOT: ${{ github.workspace }}\vcpkg
        run: |
          cmake -S code -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="$Env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake"
          cmake --build build

      # **Rename Executable on Ubuntu**
      - name: Rename executable on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: mv build/GreedyMini build/GreedyMini-ubuntu

      # **Rename Executable on macOS**
      - name: Rename executable on macOS
        if: matrix.os == 'macos-latest'
        run: mv build/GreedyMini build/GreedyMini-macos

      # **Rename Executable on Windows**
      - name: Rename executable on Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Rename-Item -Path build\Release\GreedyMini.exe -NewName GreedyMini-windows.exe

      # **Upload Artifact**
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: GreedyMini-${{ matrix.os }}
          path: |
            build/GreedyMini-*
            build/*.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in artifacts/**/GreedyMini-*; do
            name=$(basename "$file")
            echo "Uploading $name..."
            upload_url="${{ steps.create_release.outputs.upload_url }}?name=$name"
            # Remove the placeholder '{?name,label}' from the URL
            upload_url=${upload_url/\{?name,label\}/}

            curl \
              -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "$upload_url"
          done