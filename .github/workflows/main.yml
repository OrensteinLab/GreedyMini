name: Build and Release Project



on: 
  push:
    tags:
      - 'v*'  # Triggers when a tag starting with 'v' is pushed (e.g., v1.0)



      
permissions:
  contents: write


jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # **Ubuntu Setup**
      - name: Install dependencies on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libboost-all-dev ninja-build

      - name: Build on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release
          cmake --build build

      # **macOS Setup**
      - name: Install dependencies on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install cmake boost ninja

      - name: Build on macOS
        if: matrix.os == 'macos-latest'
        run: |
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release
          cmake --build build

      # **Windows Setup**
      - name: Install vcpkg and Boost on Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg.exe install boost

      - name: Build on Windows
        if: matrix.os == 'windows-latest'
        shell: cmd
        env:
          VCPKG_ROOT: "%CD%\\vcpkg"
        run: |
          "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\Common7\Tools\VsDevCmd.bat" -arch=amd64
          cmake -B build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="%VCPKG_ROOT%\scripts\buildsystems\vcpkg.cmake"
          cmake --build build


      - name: List build directory
        run: ls -al build/

      - name: Verify artifact exists
        run: test -f build/GreedyMini || (echo "Artifact not found!" && exit 1)


      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: GreedyMini-${{ matrix.os }}
          path: |
            build/GreedyMini*
            build/GreedyMini.exe
            build/Release/GreedyMini.exe

      - name: Check if Release Exists
        id: check_release
        run: |
          RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.TAG_NAME }}"
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $RELEASE_URL)
          if [ "$STATUS" -eq 200 ]; then
            echo "Release already exists."
            exit 0
          fi

      - name: Create GitHub Release
        if: steps.check_release.outcome != 'success'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: steps.check_release.outcome != 'success'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/GreedyMini
          asset_name: GreedyMini-${{ matrix.os }}
          asset_content_type: application/octet-stream
