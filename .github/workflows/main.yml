name: Build and Release Project

on:
  push:
    tags:
      - 'v*'  # Trigger on tag pushes like v1.0
  workflow_dispatch:    # Allows manual trigger from the GitHub Actions UI

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # **Install Dependencies on Ubuntu**
      - name: Install dependencies on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake musl musl-tools ninja-build libboost-all-dev
          sudo ln -sf /usr/bin/musl-gcc /usr/local/bin/musl-gcc  # Ensure musl-gcc is in PATH


      - name: Install static Boost on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y libboost-system-dev libboost-filesystem-dev
      
                
      # **Install Dependencies on macOS**
      - name: Install dependencies on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install cmake boost ninja

      # **Cache vcpkg and Boost for Windows**
      - name: Cache vcpkg and Boost
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v3
        with:
          path: |
            vcpkg
            ~/.vcpkg
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      # **Install Dependencies on Windows**
      - name: Install dependencies on Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Install CMake and Ninja via Chocolatey
          choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System' ninja

          # Check if vcpkg is already cached
          if (-Not (Test-Path "vcpkg")) {
            git clone https://github.com/microsoft/vcpkg.git
            .\vcpkg\bootstrap-vcpkg.bat
          }

          # Install Boost using vcpkg
          .\vcpkg\vcpkg.exe install boost
          
     # **Build the Project on Ubuntu and macOS**
      - name: Build the project on Ubuntu and macOS
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            cmake -S code -B build -G Ninja -DCMAKE_BUILD_TYPE=Release
          else
            cmake -S code -B build -G Ninja -DCMAKE_BUILD_TYPE=Release \
                  -DCMAKE_C_COMPILER=/usr/local/bin/musl-gcc \
                  -DCMAKE_CXX_COMPILER=/usr/local/bin/musl-g++ \
                  -DCMAKE_CXX_FLAGS="-static -D_GLIBCXX_USE_CXX11_ABI=0" \
                  -DCMAKE_EXE_LINKER_FLAGS="-static" \
                  -DBoost_USE_STATIC_LIBS=ON \
                  -DBoost_USE_STATIC_RUNTIME=ON
          fi
          cmake --build build

          
      # **Build the Project on Windows**
      - name: Build the project on Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        env:
          VCPKG_ROOT: ${{ github.workspace }}\vcpkg
        run: |
          cmake -S code -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="$Env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake"
          cmake --build build

      # **Set Execute Permissions for Unix-Based Systems**
      - name: Set Execute Permissions
        if: matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest'
        run: chmod +x build/GreedyMini

      # **Package Executables into Archives for Windows**
      - name: Package Executable for Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Create package directory if it doesn't exist
          New-Item -ItemType Directory -Path package -Force

          # Rename the executable to ensure consistency
          Rename-Item -Path build\GreedyMini.exe -NewName GreedyMini.exe

          # Compress the executable into a zip archive
          Compress-Archive -Path build\GreedyMini.exe -DestinationPath package/windows.zip

      # **Package Executables into Archives for macOS**
      - name: Package Executable for macOS
        if: matrix.os == 'macos-latest'
        run: |
          # Create package directory if it doesn't exist
          mkdir -p package

          # Compress the executable into a zip archive
          zip -j package/macos.zip build/GreedyMini

      # **Package Executables into Archives for Ubuntu**
      - name: Package Executable for Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Create package directory if it doesn't exist
          mkdir -p package

          # Compress the executable into a zip archive
          zip -j package/ubuntu.zip build/GreedyMini

      # **Upload Artifact**
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: GreedyMini-${{ matrix.os }}
          path: package/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # **Upload Release Assets**
      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in artifacts/**/*.zip; do
            name=$(basename "$file")
            echo "Uploading $name..."
            upload_url="${{ steps.create_release.outputs.upload_url }}?name=$name"
            # Remove the placeholder '{?name,label}' from the URL
            upload_url=${upload_url/\{?name,label\}/}

            curl \
              -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/zip" \
              --data-binary @"$file" \
              "$upload_url"
          done
